apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'
apply from: '../bintrayVersions.gradle'

group = bintray.publishedGroupId // Maven Group ID for the artifact
version = versions.versionName

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        failOnError false
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId bintray.publishedGroupId
                artifactId bintray.artifact

                // Add your description here
                description bintray.libraryDescription
            }
        }
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            pom.setPackaging('aar')
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }

                asNode().appendNode('url', bintray.siteUrl)

                def licensesNode = asNode().appendNode('licenses')
                def licenseNode = licensesNode.appendNode('license')
                licenseNode.appendNode('name', bintray.licenseName)
                licenseNode.appendNode('url', bintray.licenseUrl)

                def scmNode = asNode().appendNode('scm')
                scmNode.appendNode('connection', bintray.gitUrl)
                scmNode.appendNode('developerConnection', bintray.gitUrl)
                scmNode.appendNode('url', bintray.siteUrl)
            }
        }
    }
}

bintray {
    // Bintray
    Properties properties = new Properties()
    File localPropertiesFile = project.rootProject.file('local.properties')
    if (localPropertiesFile.exists()) {
        properties.load(localPropertiesFile.newDataInputStream())
    }

    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_APIKEY')

    configurations = ['archives']
    publications = ['MyPublication']
    pkg {
        repo = bintray.bintrayRepo
        name = bintray.bintrayName
        desc = bintray.libraryDescription
        websiteUrl = bintray.siteUrl
        vcsUrl = bintray.gitUrl
        licenses = bintray.allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = bintray.libraryDescription
            gpg {
                sign = true // Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                // Optional. The passphrase for GPG signing
            }
        }
    }
}